###############################################################################
# Properties retrived with System.getProperty(String) can be used as values
# by enclosing the property name with %. Eg.: %java.class.path%
#
# You can set a property for a scripting engine by language name.
#
# Examples:
# language.Java.source=1.8
###############################################################################


#######################################
# L2J_JavaEngine #####################
#######################################

# The prefered java compiler api to use. 
# The value is a fully qualified name of a class which implements the javax.toold.JavaCompiler and has a zero argument constructor. 
# When the prefered compiler is not set, the first found compiler is used. 
# When the prefered compiler is not found, the last found compiler is used.
language.Java.preferedCompiler=com.sun.tools.javac.api.JavacTool
language.Java.preferedCompiler=org.eclipse.jdt.internal.compiler.tool.EclipseCompiler

# The parent class loader for isolated script class loaders. 
# When this property is not specified, has an invalid value or is a class name which could not be found, the System classloader is used.
# Values: System, ThreadContext or a fully qualified java class name
language.Java.classloader=System
#language.Java.classloader=ThreadContext

# Source compatibility
language.Java.source=1.8

# The java sourcepath, when you have a different datapack root, you must change this too.
language.Java.sourcepath=data/scripts

# The java classpath
language.Java.cp=%java.class.path%

# The debug informations to generate for compiled class files
language.Java.g=source,lines,vars