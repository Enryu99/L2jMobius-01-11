/*
 * This file is part of the L2J Mobius project.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package ai.areas.ImperialTomb.FourSepulchers;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CopyOnWriteArrayList;

import com.l2jmobius.gameserver.GeoData;
import com.l2jmobius.gameserver.ThreadPoolManager;
import com.l2jmobius.gameserver.ai.CtrlIntention;
import com.l2jmobius.gameserver.enums.ChatType;
import com.l2jmobius.gameserver.instancemanager.GlobalVariablesManager;
import com.l2jmobius.gameserver.instancemanager.ZoneManager;
import com.l2jmobius.gameserver.model.Location;
import com.l2jmobius.gameserver.model.actor.L2Attackable;
import com.l2jmobius.gameserver.model.actor.L2Character;
import com.l2jmobius.gameserver.model.actor.L2Npc;
import com.l2jmobius.gameserver.model.actor.instance.L2PcInstance;
import com.l2jmobius.gameserver.model.holders.SkillHolder;
import com.l2jmobius.gameserver.model.quest.QuestState;
import com.l2jmobius.gameserver.network.NpcStringId;
import com.l2jmobius.gameserver.network.SystemMessageId;
import com.l2jmobius.gameserver.network.serverpackets.NpcHtmlMessage;
import com.l2jmobius.gameserver.util.Util;

import ai.AbstractNpcAI;
import quests.Q00620_FourGoblets.Q00620_FourGoblets;

/**
 * Four Selpuchers AI
 * @author Mobius
 */
public final class FourSepulchers extends AbstractNpcAI
{
	// NPCs
	private static final int CONQUEROR_MANAGER = 31921;
	private static final int EMPEROR_MANAGER = 31922;
	private static final int GREAT_SAGES_MANAGER = 31923;
	private static final int JUDGE_MANAGER = 31924;
	private static final int MYSTERIOUS_CHEST = 31468;
	private static final int KEY_CHEST = 31467;
	private static final int ROOM_3_VICTIM = 18150;
	private static final int ROOM_3_CHEST_REWARDER = 18158;
	private static final int ROOM_4_CHARM_1 = 18196;
	private static final int ROOM_4_CHARM_2 = 18197;
	private static final int ROOM_4_CHARM_3 = 18198;
	private static final int ROOM_4_CHARM_4 = 18199;
	private static final int ROOM_5_STATUE_GUARD = 18232;
	private static final int ROOM_6_REWARD_CHEST = 18256;
	private static final int CONQUEROR_BOSS = 25346;
	private static final int EMPEROR_BOSS = 25342;
	private static final int GREAT_SAGES_BOSS = 25339;
	private static final int JUDGE_BOSS = 25349;
	private static final int TELEPORTER = 31452;
	// @formatter:off
	private static final int[] FIRST_TALK_NPCS =
	{
		TELEPORTER,
		31453, 31454, 31919, 31920, 31925, 31926, 31927, 31928,
		31929, 31930, 31931, 31932, 31933, 31934, 31935, 31936,
		31937, 31938, 31939, 31940, 31941, 31942, 31943, 31944
	};
	// @formatter:on
	private static final int[] CHEST_REWARD_MONSTERS =
	{
		18120, // room 1
		ROOM_3_CHEST_REWARDER,
		18177, // room 4
		18212, // room 5 - wave 2
	};
	// Items
	private static final int ENTRANCE_PASS = 7075;
	private static final int USED_PASS = 7261;
	private static final int CHAPEL_KEY = 7260;
	private static final int ANTIQUE_BROOCH = 7262;
	// Locations
	private static final Map<Integer, Location> START_HALL_SPAWNS = new HashMap<>();
	static
	{
		START_HALL_SPAWNS.put(CONQUEROR_MANAGER, new Location(181632, -85587, -7218));
		START_HALL_SPAWNS.put(EMPEROR_MANAGER, new Location(179963, -88978, -7218));
		START_HALL_SPAWNS.put(GREAT_SAGES_MANAGER, new Location(173217, -86132, -7218));
		START_HALL_SPAWNS.put(JUDGE_MANAGER, new Location(175608, -82296, -7218));
	}
	// Zones
	private static final int CONQUEROR_ZONE = 200221;
	private static final int EMPEROR_ZONE = 200222;
	private static final int GREAT_SAGES_ZONE = 200224;
	private static final int JUDGE_ZONE = 200223;
	private static final Map<Integer, Integer> MANAGER_ZONES = new HashMap<>();
	static
	{
		MANAGER_ZONES.put(CONQUEROR_MANAGER, CONQUEROR_ZONE);
		MANAGER_ZONES.put(EMPEROR_MANAGER, EMPEROR_ZONE);
		MANAGER_ZONES.put(GREAT_SAGES_MANAGER, GREAT_SAGES_ZONE);
		MANAGER_ZONES.put(JUDGE_MANAGER, JUDGE_ZONE);
	}
	// Spawns
	private static final Map<Integer, List<L2Npc>> STORED_MONSTER_SPAWNS = new HashMap<>();
	static
	{
		STORED_MONSTER_SPAWNS.put(1, new CopyOnWriteArrayList<L2Npc>());
		STORED_MONSTER_SPAWNS.put(2, new CopyOnWriteArrayList<L2Npc>());
		STORED_MONSTER_SPAWNS.put(3, new CopyOnWriteArrayList<L2Npc>());
		STORED_MONSTER_SPAWNS.put(4, new CopyOnWriteArrayList<L2Npc>());
	}
	// @formatter:off
	private static final int[][] MONSTER_SPAWNS = // TODO: Move to XML
	{
		// sepulcherId, waveNumber, npcId, npcLocX, npcLocY, npcLocZ, npcLocHeading
		// SEPULCHER 1 - ROOM 1
		{1, 1, 18120, 182214, -85572, -7219, 53601}, // key rewarder
		{1, 1, 18132, 181626, -85799, -7218, 48022},
		{1, 1, 18132, 182223, -85833, -7220, 50241},
		{1, 1, 18132, 181850, -85294, -7220, 20973},
		{1, 1, 18132, 182260, -85353, -7218, 15208},
		{1, 1, 18133, 181953, -85506, -7219, 38327},
		{1, 1, 18133, 181639, -85397, -7218, 20774},
		{1, 1, 18133, 182364, -86036, -7220, 664},
		{1, 1, 18133, 182292, -85306, -7220, 11807},
		{1, 1, 18137, 182499, -85379, -7218, 11039},
		{1, 1, 18137, 181872, -85232, -7220, 12920},
		{1, 1, 18137, 181933, -85500, -7216, 41059},
		{1, 1, 18137, 181668, -85847, -7220, 41059},
		{1, 1, 18137, 181921, -85909, -7216, 34037},
		{1, 1, 18137, 182257, -85886, -7220, 39472},
		// SEPULCHER 1 - ROOM 2
		{1, 2, 18141, 183799, -85246, -7217, 3307},
		{1, 2, 18141, 184179, -85391, -7218, 51226},
		{1, 2, 18141, 184153, -85262, -7220, 65064},
		{1, 2, 18141, 184192, -85541, -7219, 50053},
		{1, 2, 18141, 183812, -85901, -7220, 55728},
		{1, 2, 18141, 184236, -85883, -7216, 442},
		{1, 2, 18141, 183629, -85903, -7220, 26470},
		{1, 2, 18141, 183631, -85653, -7219, 31350},
		{1, 2, 18141, 183543, -85330, -7220, 9672},
		{1, 2, 18141, 184213, -85694, -7219, 60977},
		// SEPULCHER 1 - ROOM 3
		{1, 3, 18150, 185710, -85584, -7218, 833}, // victim
		{1, 3, 18166, 185513, -85415, -7218, 29444},
		{1, 3, 18166, 185336, -85408, -7218, 22923},
		{1, 3, 18166, 185548, -85174, -7220, 4022},
		{1, 3, 18166, 185376, -85823, -7220, 18091},
		{1, 3, 18166, 185413, -86047, -7220, 33824},
		{1, 3, 18166, 185442, -85589, -7219, 13516},
		{1, 3, 18166, 185807, -85664, -7219, 64429},
		{1, 3, 18166, 185777, -86010, -7220, 42735},
		{1, 3, 18166, 185895, -85843, -7220, 53917},
		{1, 3, 18166, 185282, -85282, -7220, 27319},
		{1, 3, 18166, 186031, -85572, -7219, 47324},
		{1, 3, 18166, 186170, -85879, -7220, 53586},
		{1, 3, 18166, 186220, -85157, -7220, 40777},
		{1, 3, 18166, 185858, -85220, -7220, 63999},
		{1, 3, 18166, 186071, -85346, -7220, 59964},
		{1, 3, 18166, 186050, -85970, -7220, 59476},
		{1, 3, 18166, 185489, -85616, -7219, 44597},
		{1, 3, 18171, 186220, -86036, -7220, 61673},
		{1, 3, 18171, 185884, -85339, -7220, 3121},
		{1, 3, 18171, 185696, -85397, -7218, 58467},
		{1, 3, 18171, 185774, -85843, -7220, 26341},
		{1, 3, 18171, 185524, -85895, -7219, 34907},
		{1, 3, 18171, 185524, -85895, -7216, 22369},
		{1, 3, 18171, 185450, -85199, -7219, 3565},
		{1, 3, 18171, 185233, -85336, -7220, 20883},
		// SEPULCHER 1 - ROOM 4
		{1, 4, 18177, 187536, -85561, -7219, 30267}, // key rewarder
		{1, 4, 18196, 186903, -85044, -7216, 55684}, // charm
		{1, 4, 18197, 188101, -85059, -7220, 38092}, // charm
		{1, 4, 18198, 188115, -86084, -7220, 24830}, // charm
		{1, 4, 18199, 186895, -86092, -7220, 9770}, // charm
		{1, 4, 18185, 187904, -85328, -7220, 8357},
		{1, 4, 18185, 187696, -85307, -7220, 31718},
		{1, 4, 18185, 187690, -85705, -7219, 14402},
		{1, 4, 18185, 187428, -85743, -7219, 48912},
		{1, 4, 18185, 187135, -85904, -7220, 38008},
		{1, 4, 18185, 187235, -85292, -7220, 32428},
		{1, 4, 18187, 187955, -85906, -7220, 57628},
		{1, 4, 18187, 187907, -85704, -7219, 19115},
		{1, 4, 18187, 187645, -85421, -7219, 41743},
		{1, 4, 18187, 187774, -85271, -7216, 19492},
		{1, 4, 18187, 187419, -85213, -7220, 25008},
		{1, 4, 18187, 187144, -85228, -7220, 33336},
		{1, 4, 18187, 187066, -85410, -7218, 44928},
		{1, 4, 18187, 187575, -85835, -7220, 469},
		{1, 4, 18187, 187052, -85592, -7219, 48351},
		{1, 4, 18187, 187102, -85839, -7220, 51235},
		{1, 4, 18187, 187245, -85956, -7220, 58383},
		// SEPULCHER 1 - ROOM 5 (First Wave)
		{1, 5, 18232, 189912, -86051, -7220, 32768}, // statue
		{1, 5, 18232, 189910, -85977, -7220, 32768}, // statue
		{1, 5, 18232, 189917, -85844, -7220, 32768}, // statue
		{1, 5, 18232, 189924, -85911, -7220, 32768}, // statue
		{1, 5, 18232, 189932, -85337, -7216, 32768}, // statue
		{1, 5, 18232, 189912, -85183, -7220, 32768}, // statue
		{1, 5, 18232, 189927, -85265, -7216, 32768}, // statue
		{1, 5, 18232, 189910, -85102, -7216, 32768}, // statue
		{1, 5, 18220, 189602, -85381, -7218, 16239},
		{1, 5, 18220, 189433, -85782, -7218, 44991},
		{1, 5, 18220, 189065, -85279, -7220, 14628},
		{1, 5, 18220, 188986, -85744, -7218, 31883},
		{1, 5, 18222, 189573, -85560, -7219, 53861},
		{1, 5, 18222, 189444, -85294, -7220, 9381},
		{1, 5, 18222, 189328, -85440, -7219, 59806},
		{1, 5, 18222, 189065, -85279, -7220, 14628},
		{1, 5, 18222, 189214, -85161, -7220, 3036},
		{1, 5, 18222, 189002, -85428, -7219, 10979},
		{1, 5, 18222, 188937, -85244, -7220, 19925},
		{1, 5, 18222, 188880, -85642, -7219, 13008},
		{1, 5, 18222, 188827, -85800, -7220, 18494},
		{1, 5, 18222, 188859, -85956, -7220, 37418},
		{1, 5, 18222, 189018, -85880, -7220, 43207},
		{1, 5, 18222, 189134, -85699, -7219, 25695},
		{1, 5, 18222, 189319, -85848, -7220, 25290},
		{1, 5, 18222, 189467, -85977, -7219, 40733},
		{1, 5, 18222, 189632, -85819, -7220, 45368},
		{1, 5, 18222, 189736, -85545, -7219, 957},
		{1, 5, 18226, 189498, -85844, -7220, 58569},
		{1, 5, 18226, 189760, -85847, -7220, 65416},
		{1, 5, 18226, 189247, -85646, -7219, 39071},
		{1, 5, 18226, 189185, -85236, -7220, 31522},
		{1, 5, 18226, 188835, -85216, -7220, 32172},
		{1, 5, 18226, 189585, -85284, -7220, 17265},
		{1, 5, 18226, 189615, -85638, -7219, 11763},
		// SEPULCHER 1 - ROOM 5 (Second Wave)
		{1, 6, 18212, 189403, -85583, -7219, 29699}, // key rewarder
		{1, 6, 18232, 190030, -85669, -7219, 32768}, // statue
		{1, 6, 18232, 190038, -85583, -7219, 32768}, // statue
		{1, 6, 18232, 190037, -85497, -7219, 32768}, // statue
		{1, 6, 18195, 189357, -85356, -7218, 7328},
		{1, 6, 18195, 189136, -85943, -7220, 31470},
		{1, 6, 18195, 189504, -85989, -7218, 51090},
		{1, 6, 18195, 189070, -85599, -7219, 18361},
		{1, 6, 18221, 189594, -85322, -7220, 20071},
		{1, 6, 18221, 188987, -85288, -7220, 19394},
		{1, 6, 18221, 189232, -85782, -7218, 53954},
		{1, 6, 18221, 189706, -85857, -7216, 63899},
		{1, 6, 18223, 189533, -85989, -7217, 60516},
		{1, 6, 18223, 189813, -85246, -7220, 3484},
		{1, 6, 18223, 189630, -85603, -7219, 6643},
		{1, 6, 18223, 189335, -85187, -7220, 32827},
		{1, 6, 18223, 189223, -85456, -7219, 19322},
		{1, 6, 18223, 188986, -85810, -7218, 42998},
		{1, 6, 18227, 189029, -85851, -7220, 50392},
		{1, 6, 18227, 189165, -85302, -7220, 8388},
		{1, 6, 18227, 188905, -85572, -7219, 32328},
		{1, 6, 18227, 189535, -85820, -7220, 4267},
		{1, 6, 18227, 189688, -85478, -7219, 11996},
		// SEPULCHER 1 - ROOM 6 (Boss)
		{1, 7, 25346, 191225, -85574, -7219, 32768},
		// SEPULCHER 1 - ROOM 6 (After Fight)
		{1, 8, 18256, 191196, -85211, -7217, 54880},
		{1, 8, 18256, 190811, -85324, -7220, 47417},
		{1, 8, 18256, 190958, -85368, -7217, 62502},
		{1, 8, 18256, 190813, -85413, -7220, 9736},
		{1, 8, 18256, 190948, -85157, -7220, 35471},
		{1, 8, 18256, 191124, -85089, -7220, 18426},
		{1, 8, 18256, 190963, -85239, -7217, 8963},
		{1, 8, 18256, 191048, -85380, -7217, 64153},
		{1, 8, 18256, 191179, -85564, -7217, 55373},
		{1, 8, 18256, 190956, -85553, -7217, 33403},
		{1, 8, 18256, 191169, -85540, -7217, 30012},
		{1, 8, 18256, 190716, -85544, -7217, 32377},
		{1, 8, 18256, 190880, -85819, -7217, 32609},
		{1, 8, 18256, 191064, -85913, -7217, 64993},
		{1, 8, 18256, 190869, -85906, -7217, 47840},
		{1, 8, 18256, 190968, -85908, -7217, 65325},
		{1, 8, 18256, 191012, -85821, -7217, 32639},
		{1, 8, 18256, 191514, -86163, -7220, 3829},
		{1, 8, 18256, 191262, -86099, -7220, 53048},
		{1, 8, 18256, 191449, -86188, -7220, 62329},
		{1, 8, 18256, 191804, -85880, -7220, 17061},
		{1, 8, 18256, 191712, -86036, -7220, 11944},
		{1, 8, 18256, 191588, -85839, -7217, 31438},
		{1, 8, 18256, 191762, -86140, -7220, 59561},
		{1, 8, 18256, 191812, -86003, -7220, 12733},
		{1, 8, 18256, 191678, -86111, -7220, 3202},
		{1, 8, 18256, 191660, -85672, -7220, 32660},
		{1, 8, 18256, 191757, -85673, -7220, 18712},
		{1, 8, 18256, 191406, -85942, -7217, 63246},
		{1, 8, 18256, 191593, -86031, -7220, 60902},
		{1, 8, 18256, 191291, -85573, -7217, 29939},
		{1, 8, 18256, 191666, -85849, -7220, 50363},
		{1, 8, 18256, 191419, -85892, -7217, 37740},
		{1, 8, 18256, 191285, -85915, -7217, 65441},
		{1, 8, 18256, 191116, -85398, -7217, 62836},
		{1, 8, 18256, 191474, -85831, -7217, 32037},
		{1, 8, 18256, 191298, -85355, -7217, 55580},
		{1, 8, 18256, 191160, -85543, -7217, 21543},
		{1, 8, 18256, 191081, -85567, -7217, 33087},
		{1, 8, 18256, 191478, -85625, -7217, 30132},
		{1, 8, 18256, 191317, -85830, -7217, 32701},
		{1, 8, 18256, 191204, -85856, -7217, 58175},
		{1, 8, 18256, 191174, -85823, -7217, 32257},
		{1, 8, 18256, 191213, -85974, -7216, 49946},
		{1, 8, 18256, 191062, -85735, -7217, 53557},
		{1, 8, 18256, 191124, -85483, -7217, 50130},
		{1, 8, 18256, 190991, -85577, -7217, 33922},
		{1, 8, 18256, 191125, -85095, -7220, 7579},
		{1, 8, 18256, 191474, -85153, -7220, 18365},
		{1, 8, 18256, 191423, -85094, -7220, 33696},
		{1, 8, 18256, 191586, -85103, -7220, 64960},
		{1, 8, 18256, 191404, -85197, -7216, 16187},
		{1, 8, 18256, 191482, -85263, -7217, 55555},
		{1, 8, 18256, 191403, -85250, -7217, 8191},
		{1, 8, 18256, 191479, -85089, -7220, 15570},
		{1, 8, 18256, 191615, -85204, -7217, 52068},
		{1, 8, 18256, 191484, -85205, -7217, 13400},
		{1, 8, 18256, 191323, -86148, -7220, 58477},
		// SEPULCHER 2 - ROOM 1
		{2, 1, 18120, 180696, -88974, -7218, 213}, // key rewarder
		{2, 1, 18132, 180855, -88602, -7219, 43355},
		{2, 1, 18132, 179966, -88624, -7215, 59734},
		{2, 1, 18132, 180376, -88623, -7219, 49152},
		{2, 1, 18132, 179955, -89309, -7219, 5304},
		{2, 1, 18133, 180685, -89250, -7219, 24773},
		{2, 1, 18133, 180167, -88737, -7220, 55285},
		{2, 1, 18133, 180153, -89322, -7219, 10102},
		{2, 1, 18133, 180744, -88787, -7217, 33539},
		{2, 1, 18137, 179979, -88951, -7218, 56294},
		{2, 1, 18137, 180187, -88971, -7218, 32131},
		{2, 1, 18137, 179962, -88790, -7217, 17482},
		{2, 1, 18137, 180367, -89168, -7217, 29297},
		{2, 1, 18137, 180559, -88787, -7217, 374},
		{2, 1, 18137, 180589, -88974, -7218, 33297},
		// SEPULCHER 2 - ROOM 2
		{2, 2, 18141, 182096, -88646, -7217, 3307},
		{2, 2, 18141, 182476, -88791, -7218, 51226},
		{2, 2, 18141, 182450, -88662, -7220, 65064},
		{2, 2, 18141, 182489, -88941, -7219, 50053},
		{2, 2, 18141, 182109, -89301, -7220, 55728},
		{2, 2, 18141, 182533, -89283, -7216, 442},
		{2, 2, 18141, 181926, -89303, -7220, 26470},
		{2, 2, 18141, 181928, -89053, -7219, 31350},
		{2, 2, 18141, 181840, -88730, -7220, 9672},
		{2, 2, 18141, 182510, -89094, -7219, 60977},
		// SEPULCHER 2 - ROOM 3
		{2, 3, 18150, 184007, -88984, -7218, 833}, // victim
		{2, 3, 18166, 183810, -88815, -7218, 29444},
		{2, 3, 18166, 183633, -88808, -7218, 22923},
		{2, 3, 18166, 183845, -88574, -7220, 4022},
		{2, 3, 18166, 183673, -89223, -7220, 18091},
		{2, 3, 18166, 183710, -89447, -7220, 33824},
		{2, 3, 18166, 183739, -88989, -7219, 13516},
		{2, 3, 18166, 184104, -89064, -7219, 64429},
		{2, 3, 18166, 184074, -89410, -7220, 42735},
		{2, 3, 18166, 184192, -89243, -7220, 53917},
		{2, 3, 18166, 183579, -88682, -7220, 27319},
		{2, 3, 18166, 184328, -88972, -7219, 47324},
		{2, 3, 18166, 184467, -89279, -7220, 53586},
		{2, 3, 18166, 184517, -88557, -7220, 40777},
		{2, 3, 18166, 184155, -88620, -7220, 63999},
		{2, 3, 18166, 184368, -88746, -7220, 59964},
		{2, 3, 18166, 184347, -89370, -7220, 59476},
		{2, 3, 18166, 183786, -89016, -7219, 44597},
		{2, 3, 18171, 184517, -89436, -7220, 61673},
		{2, 3, 18171, 184181, -88739, -7220, 3121},
		{2, 3, 18171, 183993, -88797, -7218, 58467},
		{2, 3, 18171, 184071, -89243, -7220, 26341},
		{2, 3, 18171, 183821, -89295, -7219, 34907},
		{2, 3, 18171, 183821, -89295, -7216, 22369},
		{2, 3, 18171, 183747, -88599, -7219, 3565},
		{2, 3, 18171, 183530, -88736, -7220, 20883},
		// SEPULCHER 2 - ROOM 4
		{2, 4, 18177, 185833, -88961, -7219, 30267}, // key rewarder
		{2, 4, 18196, 185200, -88444, -7216, 55684}, // charm
		{2, 4, 18197, 186398, -88459, -7220, 38092}, // charm
		{2, 4, 18198, 186412, -89484, -7220, 24830}, // charm
		{2, 4, 18199, 185192, -89492, -7220, 9770}, // charm
		{2, 4, 18185, 186201, -88728, -7220, 8357},
		{2, 4, 18185, 185993, -88707, -7220, 31718},
		{2, 4, 18185, 185987, -89105, -7219, 14402},
		{2, 4, 18185, 185725, -89143, -7219, 48912},
		{2, 4, 18185, 185432, -89304, -7220, 38008},
		{2, 4, 18185, 185532, -88692, -7220, 32428},
		{2, 4, 18187, 186252, -89306, -7220, 57628},
		{2, 4, 18187, 186204, -89104, -7219, 19115},
		{2, 4, 18187, 185942, -88821, -7219, 41743},
		{2, 4, 18187, 186071, -88671, -7216, 19492},
		{2, 4, 18187, 185716, -88613, -7220, 25008},
		{2, 4, 18187, 185441, -88628, -7220, 33336},
		{2, 4, 18187, 185363, -88810, -7218, 44928},
		{2, 4, 18187, 185872, -89235, -7220, 469},
		{2, 4, 18187, 185349, -88992, -7219, 48351},
		{2, 4, 18187, 185399, -89239, -7220, 51235},
		{2, 4, 18187, 185542, -89356, -7220, 58383},
		// SEPULCHER 2 - ROOM 5 (First Wave)
		{2, 5, 18232, 188209, -89451, -7220, 32768}, // statue
		{2, 5, 18232, 188207, -89377, -7220, 32768}, // statue
		{2, 5, 18232, 188214, -89244, -7220, 32768}, // statue
		{2, 5, 18232, 188221, -89311, -7220, 32768}, // statue
		{2, 5, 18232, 188229, -88737, -7216, 32768}, // statue
		{2, 5, 18232, 188209, -88583, -7220, 32768}, // statue
		{2, 5, 18232, 188224, -88665, -7216, 32768}, // statue
		{2, 5, 18232, 188207, -88502, -7216, 32768}, // statue
		{2, 5, 18220, 187899, -88781, -7218, 16239},
		{2, 5, 18220, 187730, -89182, -7218, 44991},
		{2, 5, 18220, 187362, -88679, -7220, 14628},
		{2, 5, 18220, 187283, -89144, -7218, 31883},
		{2, 5, 18222, 187870, -88960, -7219, 53861},
		{2, 5, 18222, 187741, -88694, -7220, 9381},
		{2, 5, 18222, 187625, -88840, -7219, 59806},
		{2, 5, 18222, 187362, -88679, -7220, 14628},
		{2, 5, 18222, 187511, -88561, -7220, 3036},
		{2, 5, 18222, 187299, -88828, -7219, 10979},
		{2, 5, 18222, 187234, -88644, -7220, 19925},
		{2, 5, 18222, 187177, -89042, -7219, 13008},
		{2, 5, 18222, 187124, -89200, -7220, 18494},
		{2, 5, 18222, 187156, -89356, -7220, 37418},
		{2, 5, 18222, 187315, -89280, -7220, 43207},
		{2, 5, 18222, 187431, -89099, -7219, 25695},
		{2, 5, 18222, 187616, -89248, -7220, 25290},
		{2, 5, 18222, 187764, -89377, -7219, 40733},
		{2, 5, 18222, 187929, -89219, -7220, 45368},
		{2, 5, 18222, 188033, -88945, -7219, 957},
		{2, 5, 18226, 187795, -89244, -7220, 58569},
		{2, 5, 18226, 188057, -89247, -7220, 65416},
		{2, 5, 18226, 187544, -89046, -7219, 39071},
		{2, 5, 18226, 187482, -88636, -7220, 31522},
		{2, 5, 18226, 187132, -88616, -7220, 32172},
		{2, 5, 18226, 187882, -88684, -7220, 17265},
		{2, 5, 18226, 187912, -89038, -7219, 11763},
		// SEPULCHER 2 - ROOM 5 (Second Wave)
		{2, 6, 18212, 187700, -88983, -7219, 29699}, // key rewarder
		{2, 6, 18232, 188327, -89069, -7219, 32768}, // statue
		{2, 6, 18232, 188335, -88983, -7219, 32768}, // statue
		{2, 6, 18232, 188334, -88897, -7219, 32768}, // statue
		{2, 6, 18195, 187654, -88756, -7218, 7328},
		{2, 6, 18195, 187433, -89343, -7220, 31470},
		{2, 6, 18195, 187801, -89389, -7218, 51090},
		{2, 6, 18195, 187367, -88999, -7219, 18361},
		{2, 6, 18221, 187891, -88722, -7220, 20071},
		{2, 6, 18221, 187284, -88688, -7220, 19394},
		{2, 6, 18221, 187529, -89182, -7218, 53954},
		{2, 6, 18221, 188003, -89257, -7216, 63899},
		{2, 6, 18223, 187830, -89389, -7217, 60516},
		{2, 6, 18223, 188110, -88646, -7220, 3484},
		{2, 6, 18223, 187927, -89003, -7219, 6643},
		{2, 6, 18223, 187632, -88587, -7220, 32827},
		{2, 6, 18223, 187520, -88856, -7219, 19322},
		{2, 6, 18223, 187283, -89210, -7218, 42998},
		{2, 6, 18227, 187326, -89251, -7220, 50392},
		{2, 6, 18227, 187462, -88702, -7220, 8388},
		{2, 6, 18227, 187202, -88972, -7219, 32328},
		{2, 6, 18227, 187832, -89220, -7220, 4267},
		{2, 6, 18227, 187985, -88878, -7219, 11996},
		// SEPULCHER 2 - ROOM 6 (Boss)
		{2, 7, 25342, 189528, -88968, -7217, 32768},
		// SEPULCHER 2 - ROOM 6 (After Fight)
		{2, 8, 18256, 189493, -88611, -7217, 54880},
		{2, 8, 18256, 189108, -88724, -7220, 47417},
		{2, 8, 18256, 189255, -88768, -7217, 62502},
		{2, 8, 18256, 189110, -88813, -7220, 9736},
		{2, 8, 18256, 189245, -88557, -7220, 35471},
		{2, 8, 18256, 189421, -88489, -7220, 18426},
		{2, 8, 18256, 189260, -88639, -7217, 8963},
		{2, 8, 18256, 189345, -88780, -7217, 64153},
		{2, 8, 18256, 189476, -88964, -7217, 55373},
		{2, 8, 18256, 189253, -88953, -7217, 33403},
		{2, 8, 18256, 189466, -88940, -7217, 30012},
		{2, 8, 18256, 189013, -88944, -7217, 32377},
		{2, 8, 18256, 189177, -89219, -7217, 32609},
		{2, 8, 18256, 189361, -89313, -7217, 64993},
		{2, 8, 18256, 189166, -89306, -7217, 47840},
		{2, 8, 18256, 189265, -89308, -7217, 65325},
		{2, 8, 18256, 189309, -89221, -7217, 32639},
		{2, 8, 18256, 189811, -89563, -7220, 3829},
		{2, 8, 18256, 189559, -89499, -7220, 53048},
		{2, 8, 18256, 189746, -89588, -7220, 62329},
		{2, 8, 18256, 190101, -89280, -7220, 17061},
		{2, 8, 18256, 190009, -89436, -7220, 11944},
		{2, 8, 18256, 189885, -89239, -7217, 31438},
		{2, 8, 18256, 190059, -89540, -7220, 59561},
		{2, 8, 18256, 190109, -89403, -7220, 12733},
		{2, 8, 18256, 189975, -89511, -7220, 3202},
		{2, 8, 18256, 189957, -89072, -7220, 32660},
		{2, 8, 18256, 190054, -89073, -7220, 18712},
		{2, 8, 18256, 189703, -89342, -7217, 63246},
		{2, 8, 18256, 189890, -89431, -7220, 60902},
		{2, 8, 18256, 189588, -88973, -7217, 29939},
		{2, 8, 18256, 189963, -89249, -7220, 50363},
		{2, 8, 18256, 189716, -89292, -7217, 37740},
		{2, 8, 18256, 189582, -89315, -7217, 65441},
		{2, 8, 18256, 189413, -88798, -7217, 62836},
		{2, 8, 18256, 189771, -89231, -7217, 32037},
		{2, 8, 18256, 189595, -88755, -7217, 55580},
		{2, 8, 18256, 189457, -88943, -7217, 21543},
		{2, 8, 18256, 189378, -88967, -7217, 33087},
		{2, 8, 18256, 189775, -89025, -7217, 30132},
		{2, 8, 18256, 189614, -89230, -7217, 32701},
		{2, 8, 18256, 189501, -89256, -7217, 58175},
		{2, 8, 18256, 189471, -89223, -7217, 32257},
		{2, 8, 18256, 189510, -89374, -7216, 49946},
		{2, 8, 18256, 189359, -89135, -7217, 53557},
		{2, 8, 18256, 189421, -88883, -7217, 50130},
		{2, 8, 18256, 189288, -88977, -7217, 33922},
		{2, 8, 18256, 189422, -88495, -7220, 7579},
		{2, 8, 18256, 189771, -88553, -7220, 18365},
		{2, 8, 18256, 189720, -88494, -7220, 33696},
		{2, 8, 18256, 189883, -88503, -7220, 64960},
		{2, 8, 18256, 189701, -88597, -7216, 16187},
		{2, 8, 18256, 189779, -88663, -7217, 55555},
		{2, 8, 18256, 189700, -88650, -7217, 8191},
		{2, 8, 18256, 189776, -88489, -7220, 15570},
		{2, 8, 18256, 189912, -88604, -7217, 52068},
		{2, 8, 18256, 189781, -88605, -7217, 13400},
		{2, 8, 18256, 189620, -89548, -7220, 58477},
		// SEPULCHER 3 - ROOM 1
		{3, 1, 18120, 173134, -85740, -7219, 13290}, // key rewarder
		{3, 1, 18132, 173398, -85872, -7216, 1856},
		{3, 1, 18132, 172956, -85939, -7220, 43362},
		{3, 1, 18132, 172956, -85441, -7220, 33547},
		{3, 1, 18132, 172998, -85779, -7216, 15905},
		{3, 1, 18133, 173242, -86112, -7219, 54294},
		{3, 1, 18133, 172915, -85667, -7220, 47280},
		{3, 1, 18133, 173479, -85626, -7220, 8615},
		{3, 1, 18133, 173199, -85349, -7219, 24632},
		{3, 1, 18137, 172964, -86198, -7220, 54316},
		{3, 1, 18137, 173302, -86088, -7219, 3281},
		{3, 1, 18137, 173386, -85817, -7216, 36523},
		{3, 1, 18137, 172993, -85470, -7216, 38307},
		{3, 1, 18137, 172747, -85636, -7220, 38959},
		{3, 1, 18137, 173199, -85349, -7219, 24632},
		// SEPULCHER 3 - ROOM 2
		{3, 2, 18141, 172915, -83831, -7220, 44291},
		{3, 2, 18141, 173063, -83938, -7219, 59006},
		{3, 2, 18141, 173000, -83662, -7216, 36263},
		{3, 2, 18141, 172929, -84235, -7220, 42048},
		{3, 2, 18141, 173512, -83749, -7220, 10405},
		{3, 2, 18141, 173423, -84206, -7216, 14435},
		{3, 2, 18141, 173313, -83553, -7219, 24655},
		{3, 2, 18141, 173390, -83938, -7216, 25116},
		{3, 2, 18141, 173542, -84075, -7220, 4488},
		{3, 2, 18141, 173176, -84243, -7219, 65198},
		// SEPULCHER 3 - ROOM 3
		{3, 3, 18150, 173307, -82096, -7219, 65275}, // victim
		{3, 3, 18166, 173148, -82349, -7219, 49789},
		{3, 3, 18166, 173488, -82501, -7220, 62942},
		{3, 3, 18166, 173295, -82452, -7219, 59161},
		{3, 3, 18166, 173608, -82297, -7220, 10837},
		{3, 3, 18166, 172777, -82538, -7220, 42868},
		{3, 3, 18166, 172940, -82301, -7220, 40896},
		{3, 3, 18166, 172720, -81912, -7220, 42440},
		{3, 3, 18166, 173048, -82059, -7218, 61025},
		{3, 3, 18166, 172879, -81981, -7220, 61265},
		{3, 3, 18166, 172882, -81696, -7220, 34676},
		{3, 3, 18166, 173109, -81654, -7219, 35186},
		{3, 3, 18166, 173380, -81590, -7218, 32420},
		{3, 3, 18166, 173650, -81599, -7220, 9301},
		{3, 3, 18166, 173512, -81770, -7220, 25690},
		{3, 3, 18166, 173641, -81874, -7220, 10595},
		{3, 3, 18166, 173494, -82257, -7220, 29248},
		{3, 3, 18166, 173517, -82074, -7219, 15079},
		{3, 3, 18171, 173110, -81891, -7219, 61362},
		{3, 3, 18171, 173199, -82535, -7219, 64023},
		{3, 3, 18171, 173632, -82529, -7220, 49712},
		{3, 3, 18171, 173612, -82157, -7216, 6965},
		{3, 3, 18171, 172849, -82289, -7220, 32529},
		{3, 3, 18171, 172831, -81773, -7216, 16747},
		{3, 3, 18171, 173485, -81590, -7220, 11489},
		// SEPULCHER 3 - ROOM 4
		{3, 4, 18177, 173244, -80369, -7219, 16383}, // key rewarder
		{3, 4, 18196, 172672, -80891, -7220, 2929}, // charm
		{3, 4, 18197, 172612, -79655, -7219, 58713}, // charm
		{3, 4, 18198, 173708, -80883, -7220, 25521}, // charm
		{3, 4, 18199, 173698, -79676, -7220, 36736}, // charm
		{3, 4, 18185, 173153, -80062, -7219, 49218},
		{3, 4, 18185, 173459, -80379, -7220, 7536},
		{3, 4, 18185, 173006, -80382, -7218, 43465},
		{3, 4, 18185, 173155, -80647, -7219, 55372},
		{3, 4, 18185, 172895, -80264, -7220, 39696},
		{3, 4, 18185, 173367, -79838, -7218, 16324},
		{3, 4, 18187, 173479, -80694, -7220, 58422},
		{3, 4, 18187, 172913, -80417, -7220, 48290},
		{3, 4, 18187, 172793, -79913, -7220, 21248},
		{3, 4, 18187, 173436, -79863, -7220, 18223},
		{3, 4, 18187, 173229, -79905, -7219, 34855},
		{3, 4, 18187, 173382, -80245, -7218, 19800},
		{3, 4, 18187, 173485, -80138, -7220, 8390},
		{3, 4, 18187, 172940, -80091, -7220, 38732},
		{3, 4, 18187, 172961, -80575, -7220, 46953},
		{3, 4, 18187, 173470, -80504, -7220, 7605},
		{3, 4, 18187, 173213, -80478, -7216, 40826},
		// SEPULCHER 3 - ROOM 5 (First Wave)
		{3, 5, 18232, 172905, -77864, -7219, 49152}, // statue
		{3, 5, 18232, 172840, -77881, -7219, 49152}, // statue
		{3, 5, 18232, 172763, -77884, -7219, 49152}, // statue
		{3, 5, 18232, 173618, -77895, -7219, 49152}, // statue
		{3, 5, 18232, 173534, -77893, -7219, 49152}, // statue
		{3, 5, 18232, 173452, -77901, -7219, 49152}, // statue
		{3, 5, 18232, 173374, -77903, -7217, 49152}, // statue
		{3, 5, 18232, 172965, -77878, -7217, 49152}, // statue
		{3, 5, 18220, 172824, -78791, -7219, 25363},
		{3, 5, 18220, 172829, -78233, -7219, 16290},
		{3, 5, 18220, 173495, -78146, -7217, 1129},
		{3, 5, 18220, 173523, -78661, -7219, 53052},
		{3, 5, 18222, 172764, -78854, -7219, 39831},
		{3, 5, 18222, 173124, -78487, -7218, 24278},
		{3, 5, 18222, 172948, -78723, -7219, 49508},
		{3, 5, 18222, 173121, -78899, -7218, 49076},
		{3, 5, 18222, 173290, -78816, -7218, 62766},
		{3, 5, 18222, 173482, -78593, -7219, 8969},
		{3, 5, 18222, 173519, -78873, -7219, 680},
		{3, 5, 18222, 173422, -78216, -7219, 18030},
		{3, 5, 18222, 173450, -78409, -7219, 12764},
		{3, 5, 18222, 173205, -78072, -7218, 34656},
		{3, 5, 18222, 173560, -78007, -7219, 10297},
		{3, 5, 18222, 173303, -78078, -7218, 11004},
		{3, 5, 18222, 172852, -78058, -7219, 32354},
		{3, 5, 18222, 172895, -78297, -7219, 51008},
		{3, 5, 18222, 173106, -78267, -7218, 23392},
		{3, 5, 18222, 172939, -78460, -7219, 41711},
		{3, 5, 18226, 173545, -78958, -7219, 61434},
		{3, 5, 18226, 173332, -78651, -7218, 63860},
		{3, 5, 18226, 172854, -78747, -7219, 45974},
		{3, 5, 18226, 172974, -78593, -7217, 41114},
		{3, 5, 18226, 172987, -78324, -7217, 43194},
		{3, 5, 18226, 173183, -78019, -7218, 22569},
		{3, 5, 18226, 173367, -78292, -7217, 15370},
		// SEPULCHER 3 - ROOM 5 (Second Wave)
		{3, 6, 18212, 173195, -78387, -7218, 45514}, // key rewarder
		{3, 6, 18232, 173186, -77756, -7218, 49152}, // statue
		{3, 6, 18232, 173256, -77755, -7218, 49152}, // statue
		{3, 6, 18232, 173120, -77753, -7218, 49152}, // statue
		{3, 6, 18227, 172727, -78149, -7219, 23490},
		{3, 6, 18195, 172964, -78369, -7217, 33814},
		{3, 6, 18195, 173207, -78656, -7218, 56199},
		{3, 6, 18195, 173262, -78339, -7218, 25711},
		{3, 6, 18195, 173531, -78555, -7219, 7818},
		{3, 6, 18221, 173557, -78336, -7219, 11317},
		{3, 6, 18221, 173473, -78710, -7219, 63315},
		{3, 6, 18221, 173015, -78611, -7217, 43365},
		{3, 6, 18221, 173248, -78235, -7218, 29472},
		{3, 6, 18223, 173404, -78358, -7217, 6698},
		{3, 6, 18223, 172910, -78466, -7219, 23672},
		{3, 6, 18223, 173183, -78059, -7218, 7013},
		{3, 6, 18223, 173152, -78754, -7218, 43240},
		{3, 6, 18223, 172923, -78266, -7219, 15706},
		{3, 6, 18223, 173406, -78622, -7217, 54169},
		{3, 6, 18227, 173456, -78263, -7219, 59104},
		{3, 6, 18227, 173423, -78875, -7219, 44845},
		{3, 6, 18227, 172939, -78779, -7219, 25011},
		{3, 6, 18227, 172997, -78482, -7217, 14372},
		// SEPULCHER 3 - ROOM 6 (Boss)
		{3, 7, 25339, 173195, -76565, -7216, 49152},
		// SEPULCHER 3 - ROOM 6 (After Fight)
		{3, 8, 18256, 173018, -76165, -7215, 24982},
		{3, 8, 18256, 172973, -76550, -7216, 5423},
		{3, 8, 18256, 172878, -76378, -7216, 18354},
		{3, 8, 18256, 172925, -76440, -7216, 20675},
		{3, 8, 18256, 172864, -76718, -7216, 59534},
		{3, 8, 18256, 172739, -76887, -7219, 35906},
		{3, 8, 18256, 172849, -76621, -7216, 64290},
		{3, 8, 18256, 173402, -76970, -7219, 59429},
		{3, 8, 18256, 173272, -77050, -7219, 40755},
		{3, 8, 18256, 173350, -76975, -7219, 39294},
		{3, 8, 18256, 173434, -76844, -7216, 53275},
		{3, 8, 18256, 173724, -76897, -7219, 2325},
		{3, 8, 18256, 173487, -76876, -7216, 47024},
		{3, 8, 18256, 173687, -76665, -7219, 18033},
		{3, 8, 18256, 173520, -76690, -7216, 50915},
		{3, 8, 18256, 173677, -76681, -7219, 6162},
		{3, 8, 18256, 173356, -76574, -7216, 59624},
		{3, 8, 18256, 173506, -76608, -7216, 51276},
		{3, 8, 18256, 173337, -76477, -7216, 19869},
		{3, 8, 18256, 173376, -76705, -7216, 50732},
		{3, 8, 18256, 173387, -76621, -7216, 31249},
		{3, 8, 18256, 173511, -76760, -7216, 47818},
		{3, 8, 18256, 173113, -76577, -7216, 37147},
		{3, 8, 18256, 173158, -76448, -7216, 51736},
		{3, 8, 18256, 173271, -76399, -7216, 33089},
		{3, 8, 18256, 173396, -76249, -7216, 49151},
		{3, 8, 18256, 173399, -76388, -7216, 47818},
		{3, 8, 18256, 173487, -76516, -7216, 61221},
		{3, 8, 18256, 173405, -76480, -7216, 49831},
		{3, 8, 18256, 173408, -76318, -7216, 50948},
		{3, 8, 18256, 173689, -76178, -7219, 48206},
		{3, 8, 18256, 173694, -76123, -7219, 50292},
		{3, 8, 18256, 173688, -76235, -7219, 48969},
		{3, 8, 18256, 173685, -76041, -7219, 7246},
		{3, 8, 18256, 173498, -76392, -7216, 29118},
		{3, 8, 18256, 173543, -76111, -7219, 25388},
		{3, 8, 18256, 173575, -76041, -7219, 11911},
		{3, 8, 18256, 173646, -76446, -7219, 17752},
		{3, 8, 18256, 173396, -76112, -7219, 36706},
		{3, 8, 18256, 173080, -76068, -7219, 47701},
		{3, 8, 18256, 172984, -76095, -7219, 10228},
		{3, 8, 18256, 173074, -76116, -7219, 47854},
		{3, 8, 18256, 173087, -76018, -7219, 6695},
		{3, 8, 18256, 172911, -76204, -7216, 12608},
		{3, 8, 18256, 172637, -76477, -7219, 39951},
		{3, 8, 18256, 172625, -76563, -7219, 47705},
		{3, 8, 18256, 172801, -76342, -7215, 39904},
		{3, 8, 18256, 172891, -76446, -7216, 34589},
		{3, 8, 18256, 172872, -76307, -7216, 17263},
		{3, 8, 18256, 172667, -76633, -7219, 14412},
		{3, 8, 18256, 172712, -76624, -7219, 49328},
		{3, 8, 18256, 172774, -76612, -7219, 1994},
		{3, 8, 18256, 172619, -76889, -7219, 32941},
		{3, 8, 18256, 172884, -76842, -7216, 26023},
		{3, 8, 18256, 172645, -76748, -7219, 14482},
		{3, 8, 18256, 173049, -76936, -7216, 30541},
		{3, 8, 18256, 173192, -76967, -7219, 24384},
		{3, 8, 18256, 172986, -76919, -7216, 30018},
		{3, 8, 18256, 173142, -76732, -7216, 65011},
		{3, 8, 18256, 173221, -76850, -7216, 55305},
		// SEPULCHER 4 - ROOM 1
		{4, 1, 18120, 175524, -81903, -7219, 13290}, // key rewarder
		{4, 1, 18132, 175788, -82035, -7216, 1856},
		{4, 1, 18132, 175346, -82102, -7220, 43362},
		{4, 1, 18132, 175346, -81604, -7220, 33547},
		{4, 1, 18132, 175388, -81942, -7216, 15905},
		{4, 1, 18133, 175632, -82275, -7219, 54294},
		{4, 1, 18133, 175305, -81830, -7220, 47280},
		{4, 1, 18133, 175869, -81789, -7220, 8615},
		{4, 1, 18133, 175589, -81512, -7219, 24632},
		{4, 1, 18137, 175354, -82361, -7220, 54316},
		{4, 1, 18137, 175692, -82251, -7219, 3281},
		{4, 1, 18137, 175776, -81980, -7216, 36523},
		{4, 1, 18137, 175383, -81633, -7216, 38307},
		{4, 1, 18137, 175137, -81799, -7220, 38959},
		{4, 1, 18137, 175589, -81512, -7219, 24632},
		// SEPULCHER 4 - ROOM 2
		{4, 2, 18141, 175305, -79994, -7220, 44291},
		{4, 2, 18141, 175453, -80101, -7219, 59006},
		{4, 2, 18141, 175390, -79825, -7216, 36263},
		{4, 2, 18141, 175319, -80398, -7220, 42048},
		{4, 2, 18141, 175902, -79912, -7220, 10405},
		{4, 2, 18141, 175813, -80369, -7216, 14435},
		{4, 2, 18141, 175703, -79716, -7219, 24655},
		{4, 2, 18141, 175780, -80101, -7216, 25116},
		{4, 2, 18141, 175932, -80238, -7220, 4488},
		{4, 2, 18141, 175566, -80406, -7219, 65198},
		// SEPULCHER 4 - ROOM 3
		{4, 3, 18150, 175697, -78259, -7219, 65275}, // victim
		{4, 3, 18166, 175538, -78512, -7219, 49789},
		{4, 3, 18166, 175878, -78664, -7220, 62942},
		{4, 3, 18166, 175685, -78615, -7219, 59161},
		{4, 3, 18166, 175998, -78460, -7220, 10837},
		{4, 3, 18166, 175167, -78701, -7220, 42868},
		{4, 3, 18166, 175330, -78464, -7220, 40896},
		{4, 3, 18166, 175110, -78075, -7220, 42440},
		{4, 3, 18166, 175438, -78222, -7218, 61025},
		{4, 3, 18166, 175269, -78144, -7220, 61265},
		{4, 3, 18166, 175272, -77859, -7220, 34676},
		{4, 3, 18166, 175499, -77817, -7219, 35186},
		{4, 3, 18166, 175770, -77753, -7218, 32420},
		{4, 3, 18166, 176040, -77762, -7220, 9301},
		{4, 3, 18166, 175902, -77933, -7220, 25690},
		{4, 3, 18166, 176031, -78037, -7220, 10595},
		{4, 3, 18166, 175884, -78420, -7220, 29248},
		{4, 3, 18166, 175907, -78237, -7219, 15079},
		{4, 3, 18171, 175500, -78054, -7219, 61362},
		{4, 3, 18171, 175589, -78698, -7219, 64023},
		{4, 3, 18171, 176022, -78692, -7220, 49712},
		{4, 3, 18171, 176002, -78320, -7216, 6965},
		{4, 3, 18171, 175239, -78452, -7220, 32529},
		{4, 3, 18171, 175221, -77936, -7216, 16747},
		{4, 3, 18171, 175875, -77753, -7220, 11489},
		// SEPULCHER 4 - ROOM 4
		{4, 4, 18177, 175634, -76532, -7219, 16383}, // key rewarder
		{4, 4, 18196, 175029, -77073, -7219, 4074}, // charm
		{4, 4, 18197, 175015, -75843, -7221, 60216}, // charm
		{4, 4, 18198, 176154, -77075, -7219, 27131}, // charm
		{4, 4, 18199, 176181, -75837, -7221, 37604}, // charm
		{4, 4, 18185, 175543, -76225, -7219, 49218},
		{4, 4, 18185, 175849, -76542, -7220, 7536},
		{4, 4, 18185, 175396, -76545, -7218, 43465},
		{4, 4, 18185, 175545, -76810, -7219, 55372},
		{4, 4, 18185, 175285, -76427, -7220, 39696},
		{4, 4, 18185, 175757, -76001, -7218, 16324},
		{4, 4, 18187, 175869, -76857, -7220, 58422},
		{4, 4, 18187, 175303, -76580, -7220, 48290},
		{4, 4, 18187, 175183, -76076, -7220, 21248},
		{4, 4, 18187, 175826, -76026, -7220, 18223},
		{4, 4, 18187, 175619, -76068, -7219, 34855},
		{4, 4, 18187, 175772, -76408, -7218, 19800},
		{4, 4, 18187, 175875, -76301, -7220, 8390},
		{4, 4, 18187, 175330, -76254, -7220, 38732},
		{4, 4, 18187, 175351, -76738, -7220, 46953},
		{4, 4, 18187, 175860, -76667, -7220, 7605},
		{4, 4, 18187, 175603, -76641, -7216, 40826},
		// SEPULCHER 4 - ROOM 5 (First Wave)
		{4, 5, 18232, 175295, -74027, -7219, 49152}, // statue
		{4, 5, 18232, 175230, -74044, -7219, 49152}, // statue
		{4, 5, 18232, 175153, -74047, -7219, 49152}, // statue
		{4, 5, 18232, 176008, -74058, -7219, 49152}, // statue
		{4, 5, 18232, 175924, -74056, -7219, 49152}, // statue
		{4, 5, 18232, 175842, -74064, -7219, 49152}, // statue
		{4, 5, 18232, 175764, -74066, -7217, 49152}, // statue
		{4, 5, 18232, 175355, -74041, -7217, 49152}, // statue
		{4, 5, 18220, 175214, -74954, -7219, 25363},
		{4, 5, 18220, 175219, -74396, -7219, 16290},
		{4, 5, 18220, 175885, -74309, -7217, 1129},
		{4, 5, 18220, 175913, -74824, -7219, 53052},
		{4, 5, 18222, 175154, -75017, -7219, 39831},
		{4, 5, 18222, 175514, -74650, -7218, 24278},
		{4, 5, 18222, 175338, -74886, -7219, 49508},
		{4, 5, 18222, 175511, -75062, -7218, 49076},
		{4, 5, 18222, 175680, -74979, -7218, 62766},
		{4, 5, 18222, 175872, -74756, -7219, 8969},
		{4, 5, 18222, 175909, -75036, -7219, 680},
		{4, 5, 18222, 175812, -74379, -7219, 18030},
		{4, 5, 18222, 175840, -74572, -7219, 12764},
		{4, 5, 18222, 175595, -74235, -7218, 34656},
		{4, 5, 18222, 175950, -74170, -7219, 10297},
		{4, 5, 18222, 175693, -74241, -7218, 11004},
		{4, 5, 18222, 175242, -74221, -7219, 32354},
		{4, 5, 18222, 175285, -74460, -7219, 51008},
		{4, 5, 18222, 175496, -74430, -7218, 23392},
		{4, 5, 18222, 175329, -74623, -7219, 41711},
		{4, 5, 18226, 175935, -75121, -7219, 61434},
		{4, 5, 18226, 175722, -74814, -7218, 63860},
		{4, 5, 18226, 175244, -74910, -7219, 45974},
		{4, 5, 18226, 175364, -74756, -7217, 41114},
		{4, 5, 18226, 175377, -74487, -7217, 43194},
		{4, 5, 18226, 175573, -74182, -7218, 22569},
		{4, 5, 18226, 175757, -74455, -7217, 15370},
		// SEPULCHER 4 - ROOM 5 (Second Wave)
		{4, 6, 18212, 175585, -74550, -7218, 45514}, // key rewarder
		{4, 6, 18232, 175576, -73919, -7218, 49152}, // statue
		{4, 6, 18232, 175646, -73918, -7218, 49152}, // statue
		{4, 6, 18232, 175510, -73916, -7218, 49152}, // statue
		{4, 6, 18227, 175117, -74312, -7219, 23490},
		{4, 6, 18195, 175354, -74532, -7217, 33814},
		{4, 6, 18195, 175597, -74819, -7218, 56199},
		{4, 6, 18195, 175652, -74502, -7218, 25711},
		{4, 6, 18195, 175921, -74718, -7219, 7818},
		{4, 6, 18221, 175947, -74499, -7219, 11317},
		{4, 6, 18221, 175863, -74873, -7219, 63315},
		{4, 6, 18221, 175405, -74774, -7217, 43365},
		{4, 6, 18221, 175638, -74398, -7218, 29472},
		{4, 6, 18223, 175794, -74521, -7217, 6698},
		{4, 6, 18223, 175300, -74629, -7219, 23672},
		{4, 6, 18223, 175573, -74222, -7218, 7013},
		{4, 6, 18223, 175542, -74917, -7218, 43240},
		{4, 6, 18223, 175313, -74429, -7219, 15706},
		{4, 6, 18223, 175796, -74785, -7217, 54169},
		{4, 6, 18227, 175846, -74426, -7219, 59104},
		{4, 6, 18227, 175813, -75038, -7219, 44845},
		{4, 6, 18227, 175329, -74942, -7219, 25011},
		{4, 6, 18227, 175387, -74645, -7217, 14372},
		// SEPULCHER 4 - ROOM 6 (Boss)
		{4, 7, 25349, 175590, -72749, -7218, 31944},
		// SEPULCHER 4 - ROOM 6 (After Fight)
		{4, 8, 18256, 175408, -72328, -7215, 24982},
		{4, 8, 18256, 175363, -72713, -7216, 5423},
		{4, 8, 18256, 175268, -72541, -7216, 18354},
		{4, 8, 18256, 175315, -72603, -7216, 20675},
		{4, 8, 18256, 175254, -72881, -7216, 59534},
		{4, 8, 18256, 175129, -73050, -7219, 35906},
		{4, 8, 18256, 175239, -72784, -7216, 64290},
		{4, 8, 18256, 175792, -73133, -7219, 59429},
		{4, 8, 18256, 175662, -73213, -7219, 40755},
		{4, 8, 18256, 175740, -73138, -7219, 39294},
		{4, 8, 18256, 175824, -73007, -7216, 53275},
		{4, 8, 18256, 176114, -73060, -7219, 2325},
		{4, 8, 18256, 175877, -73039, -7216, 47024},
		{4, 8, 18256, 176077, -72828, -7219, 18033},
		{4, 8, 18256, 175910, -72853, -7216, 50915},
		{4, 8, 18256, 176067, -72844, -7219, 6162},
		{4, 8, 18256, 175746, -72737, -7216, 59624},
		{4, 8, 18256, 175896, -72771, -7216, 51276},
		{4, 8, 18256, 175727, -72640, -7216, 19869},
		{4, 8, 18256, 175766, -72868, -7216, 50732},
		{4, 8, 18256, 175777, -72784, -7216, 31249},
		{4, 8, 18256, 175901, -72923, -7216, 47818},
		{4, 8, 18256, 175503, -72740, -7216, 37147},
		{4, 8, 18256, 175548, -72611, -7216, 51736},
		{4, 8, 18256, 175661, -72562, -7216, 33089},
		{4, 8, 18256, 175786, -72412, -7216, 49151},
		{4, 8, 18256, 175789, -72551, -7216, 47818},
		{4, 8, 18256, 175877, -72679, -7216, 61221},
		{4, 8, 18256, 175795, -72643, -7216, 49831},
		{4, 8, 18256, 175798, -72481, -7216, 50948},
		{4, 8, 18256, 176079, -72341, -7219, 48206},
		{4, 8, 18256, 176084, -72286, -7219, 50292},
		{4, 8, 18256, 176078, -72398, -7219, 48969},
		{4, 8, 18256, 176075, -72204, -7219, 7246},
		{4, 8, 18256, 175888, -72555, -7216, 29118},
		{4, 8, 18256, 175933, -72274, -7219, 25388},
		{4, 8, 18256, 175965, -72204, -7219, 11911},
		{4, 8, 18256, 176036, -72609, -7219, 17752},
		{4, 8, 18256, 175786, -72275, -7219, 36706},
		{4, 8, 18256, 175470, -72231, -7219, 47701},
		{4, 8, 18256, 175374, -72258, -7219, 10228},
		{4, 8, 18256, 175464, -72279, -7219, 47854},
		{4, 8, 18256, 175477, -72181, -7219, 6695},
		{4, 8, 18256, 175301, -72367, -7216, 12608},
		{4, 8, 18256, 175027, -72640, -7219, 39951},
		{4, 8, 18256, 175015, -72726, -7219, 47705},
		{4, 8, 18256, 175191, -72505, -7215, 39904},
		{4, 8, 18256, 175281, -72609, -7216, 34589},
		{4, 8, 18256, 175262, -72470, -7216, 17263},
		{4, 8, 18256, 175057, -72796, -7219, 14412},
		{4, 8, 18256, 175102, -72787, -7219, 49328},
		{4, 8, 18256, 175164, -72775, -7219, 1994},
		{4, 8, 18256, 175009, -73052, -7219, 32941},
		{4, 8, 18256, 175274, -73005, -7216, 26023},
		{4, 8, 18256, 175035, -72911, -7219, 14482},
		{4, 8, 18256, 175439, -73099, -7216, 30541},
		{4, 8, 18256, 175582, -73130, -7219, 24384},
		{4, 8, 18256, 175376, -73082, -7216, 30018},
		{4, 8, 18256, 175532, -72895, -7216, 65011},
		{4, 8, 18256, 175611, -73013, -7216, 55305},
	};
	private static final int[][] CHEST_SPAWN_LOCATIONS =
	{
		// sepulcherId, roomNumber, npcLocX, npcLocY, npcLocZ, npcLocHeading
		{1, 1, 182074, -85579, -7216, 32768},
		{1, 2, 183868, -85577, -7216, 32768},
		{1, 3, 185681, -85573, -7216, 32768},
		{1, 4, 187498, -85566, -7216, 32768},
		{1, 5, 189306, -85571, -7216, 32768},
		{2, 1, 180375, -88968, -7216, 32768},
		{2, 2, 182151, -88962, -7216, 32768},
		{2, 3, 183960, -88964, -7216, 32768},
		{2, 4, 185792, -88966, -7216, 32768},
		{2, 5, 187625, -88953, -7216, 32768},
		{3, 1, 173218, -85703, -7216, 49152},
		{3, 2, 173206, -83929, -7216, 49152},
		{3, 3, 173208, -82085, -7216, 49152},
		{3, 4, 173191, -80290, -7216, 49152},
		{3, 5, 173198, -78465, -7216, 49152},
		{4, 1, 175601, -81905, -7216, 49152},
		{4, 2, 175619, -80094, -7216, 49152},
		{4, 3, 175608, -78268, -7216, 49152},
		{4, 4, 175588, -76472, -7216, 49152},
		{4, 5, 175594, -74655, -7216, 49152},
	};
	// Doors
	private static final int[][] DOORS =
	{
		// sepulcherId, waveNumber, doorId
		{1, 2, 25150012}, {1, 3, 25150013}, {1, 4, 25150014}, {1, 5, 25150015}, {1, 7, 25150016},
		{2, 2, 25150002}, {2, 3, 25150003}, {2, 4, 25150004}, {2, 5, 25150005}, {2, 7, 25150006},
		{3, 2, 25150032}, {3, 3, 25150033}, {3, 4, 25150034}, {3, 5, 25150035}, {3, 7, 25150036},
		{4, 2, 25150022}, {4, 3, 25150023}, {4, 4, 25150024}, {4, 5, 25150025}, {4, 7, 25150026},
	};
	// @formatter:on
	// Skill
	private static final SkillHolder PETRIFY = new SkillHolder(4616, 1);
	// Misc
	private static final NpcStringId[] VICTIM_MSG =
	{
		NpcStringId.HELP_ME,
		NpcStringId.DON_T_MISS,
		NpcStringId.KEEP_PUSHING,
	};
	private static final Map<Integer, Integer> STORED_PROGRESS = new HashMap<>();
	static
	{
		STORED_PROGRESS.put(1, 1);
		STORED_PROGRESS.put(2, 1);
		STORED_PROGRESS.put(3, 1);
		STORED_PROGRESS.put(4, 1);
	}
	private final static int PARTY_MEMBER_COUNT = 4;
	private final static int ENTRY_DELAY = 3; // minutes
	private final static int TIME_ATTACK = 60; // minutes
	
	private FourSepulchers()
	{
		addFirstTalkId(CONQUEROR_MANAGER, EMPEROR_MANAGER, GREAT_SAGES_MANAGER, JUDGE_MANAGER, MYSTERIOUS_CHEST, KEY_CHEST);
		addTalkId(CONQUEROR_MANAGER, EMPEROR_MANAGER, GREAT_SAGES_MANAGER, JUDGE_MANAGER, MYSTERIOUS_CHEST, KEY_CHEST);
		addFirstTalkId(FIRST_TALK_NPCS);
		addTalkId(FIRST_TALK_NPCS);
		addKillId(CHEST_REWARD_MONSTERS);
		addKillId(ROOM_3_VICTIM, ROOM_4_CHARM_1, ROOM_4_CHARM_2, ROOM_4_CHARM_3, ROOM_4_CHARM_4, ROOM_6_REWARD_CHEST, CONQUEROR_BOSS, EMPEROR_BOSS, GREAT_SAGES_BOSS, JUDGE_BOSS);
		addSpawnId(ROOM_3_VICTIM, ROOM_4_CHARM_1, ROOM_4_CHARM_2, ROOM_4_CHARM_3, ROOM_4_CHARM_4, ROOM_5_STATUE_GUARD, ROOM_6_REWARD_CHEST, CONQUEROR_BOSS, EMPEROR_BOSS, GREAT_SAGES_BOSS, JUDGE_BOSS);
	}
	
	@Override
	public String onAdvEvent(String event, L2Npc npc, L2PcInstance player)
	{
		String htmltext = event;
		
		switch (event)
		{
			case "Enter":
			{
				final QuestState qs = player.getQuestState(Q00620_FourGoblets.class.getSimpleName());
				if (qs == null)
				{
					return getNoQuestMsg(player);
				}
				if (qs.isStarted())
				{
					tryEnter(npc, player);
					return null;
				}
				break;
			}
			case "OpenGate":
			{
				final QuestState qs = player.getQuestState(Q00620_FourGoblets.class.getSimpleName());
				if (qs == null)
				{
					return getNoQuestMsg(player);
				}
				if (qs.isStarted() && (npc.getScriptValue() == 0))
				{
					if (hasQuestItems(player, CHAPEL_KEY))
					{
						npc.setScriptValue(1);
						takeItems(player, CHAPEL_KEY, -1);
						final int sepulcherId = getSepulcherId(player);
						final int currentWave = STORED_PROGRESS.get(sepulcherId) + 1;
						STORED_PROGRESS.put(sepulcherId, currentWave); // update progress
						for (int[] doorInfo : DOORS)
						{
							if ((doorInfo[0] == sepulcherId) && (doorInfo[1] == currentWave))
							{
								openDoor(doorInfo[2], 0);
								ThreadPoolManager.getInstance().scheduleGeneral(() ->
								{
									closeDoor(doorInfo[2], 0);
								}, 15000);
								break;
							}
						}
						if (currentWave < 7)
						{
							npc.broadcastSay(ChatType.NPC_GENERAL, NpcStringId.THE_MONSTERS_HAVE_SPAWNED);
							spawnMysteriousChest(player);
						}
						else
						{
							spawnNextWave(player);
						}
					}
					else
					{
						final NpcHtmlMessage html = new NpcHtmlMessage(npc.getObjectId());
						html.setFile(player.getHtmlPrefix(), "data/scripts/ai/areas/ImperialTomb/FourSepulchers/Gatekeeper-no.html");
						html.replace("%npcname%", npc.getName());
						player.sendPacket(html);
					}
					return null;
				}
				htmltext = getNoQuestMsg(player); // TODO: Replace with proper html?
				break;
			}
			case "SPAWN_MYSTERIOUS_CHEST":
			{
				spawnMysteriousChest(player);
				return null;
			}
			case "VICTIM_FLEE":
			{
				if ((npc != null) && !npc.isDead())
				{
					final Location destination = GeoData.getInstance().moveCheck(npc.getX(), npc.getY(), npc.getZ(), npc.getSpawn().getLocation().getX() + getRandom(-400, 400), npc.getSpawn().getLocation().getY() + getRandom(-400, 400), npc.getZ(), npc.getInstanceWorld());
					if (Util.calculateDistance(npc, npc.getSpawn().getLocation(), false, false) < 600)
					{
						npc.getAI().setIntention(CtrlIntention.AI_INTENTION_MOVE_TO, destination);
					}
					npc.broadcastSay(ChatType.NPC_GENERAL, VICTIM_MSG[getRandom(VICTIM_MSG.length)]);
					startQuestTimer("VICTIM_FLEE", 3000, npc, null, false);
				}
				return null;
			}
			case "REMOVE_PETRIFY":
			{
				npc.stopSkillEffects(PETRIFY.getSkill());
				npc.setTargetable(true);
				npc.setIsInvul(false);
				return null;
			}
			case "WAVE_DEFEATED_CHECK":
			{
				final int sepulcherId = getSepulcherId(player);
				final int currentWave = STORED_PROGRESS.get(sepulcherId);
				Location lastLocation = null;
				for (L2Npc spawn : STORED_MONSTER_SPAWNS.get(sepulcherId))
				{
					lastLocation = spawn.getLocation();
					if (spawn.isDead())
					{
						STORED_MONSTER_SPAWNS.get(sepulcherId).remove(spawn);
					}
				}
				if (STORED_MONSTER_SPAWNS.get(sepulcherId).isEmpty())
				{
					if (currentWave == 2)
					{
						if (getRandomBoolean())
						{
							spawnNextWave(player);
						}
						else
						{
							spawnKeyChest(player, lastLocation);
						}
					}
					else if (currentWave == 5)
					{
						STORED_PROGRESS.put(sepulcherId, currentWave + 1);
						spawnNextWave(player);
					}
				}
				else if (sepulcherId > 0)
				{
					startQuestTimer("WAVE_DEFEATED_CHECK", 5000, null, player, false);
				}
				return null;
			}
		}
		return htmltext;
	}
	
	@Override
	public String onFirstTalk(L2Npc npc, L2PcInstance player)
	{
		if (npc == null)
		{
			return null;
		}
		if (npc.getId() == MYSTERIOUS_CHEST)
		{
			if (npc.getScriptValue() == 0)
			{
				npc.setScriptValue(1);
				npc.deleteMe();
				spawnNextWave(player);
			}
			return null;
		}
		if (npc.getId() == KEY_CHEST)
		{
			if (npc.getScriptValue() == 0)
			{
				npc.setScriptValue(1);
				npc.deleteMe();
				giveItems(player, CHAPEL_KEY, 1);
			}
			return null;
		}
		return npc.getId() + ".html";
	}
	
	@Override
	public String onSpawn(L2Npc npc)
	{
		npc.setRandomWalking(false);
		if (npc.getId() == ROOM_3_VICTIM)
		{
			npc.disableCoreAI(true);
			npc.setRunning();
			startQuestTimer("VICTIM_FLEE", 1000, npc, null, false);
		}
		if (npc.getId() == ROOM_5_STATUE_GUARD)
		{
			npc.setTarget(npc);
			npc.doCast(PETRIFY.getSkill());
			((L2Attackable) npc).setCanReturnToSpawnPoint(false);
			npc.setTargetable(false);
			npc.setIsInvul(true);
			startQuestTimer("REMOVE_PETRIFY", 5 * 60 * 1000, npc, null, false); // 5 minutes
		}
		return super.onSpawn(npc);
	}
	
	@Override
	public String onKill(L2Npc npc, L2PcInstance killer, boolean isSummon)
	{
		switch (npc.getId())
		{
			case ROOM_3_VICTIM:
			{
				final L2Npc boss = addSpawn(ROOM_3_CHEST_REWARDER, npc);
				boss.broadcastInfo(); // TODO: Why sometimes we cannot see some monsters?
				break;
			}
			case ROOM_4_CHARM_1:
			case ROOM_4_CHARM_2:
			case ROOM_4_CHARM_3:
			case ROOM_4_CHARM_4:
			{
				// TODO: Proper messages?
				npc.broadcastSay(ChatType.NPC_GENERAL, NpcStringId.THE_DEFENSE_REDUCTION_DEVICE_HAS_BEEN_DESTROYED);
				break;
			}
			case CONQUEROR_BOSS:
			case EMPEROR_BOSS:
			case GREAT_SAGES_BOSS:
			case JUDGE_BOSS:
			{
				final int sepulcherId = getSepulcherId(killer);
				final int currentWave = STORED_PROGRESS.get(sepulcherId);
				STORED_PROGRESS.put(sepulcherId, currentWave + 1);
				
				if ((killer.getParty() != null) && (sepulcherId > 0))
				{
					for (L2PcInstance mem : killer.getParty().getMembers())
					{
						if (Util.checkIfInRange(1500, killer, mem, true))
						{
							final QuestState qs = killer.getQuestState(Q00620_FourGoblets.class.getSimpleName());
							if ((qs != null) && qs.isStarted())
							{
								giveItems(mem, 7255 + sepulcherId, 1);
							}
						}
					}
				}
				
				spawnNextWave(killer);
				
				final L2Npc teleporter = addSpawn(TELEPORTER, npc, true, 0, false);
				teleporter.broadcastInfo(); // TODO: Why sometimes we cannot see some npcs?
				break;
			}
			case ROOM_6_REWARD_CHEST:
			{
				npc.dropItem(killer, 57, getRandom(300, 1300));
				break;
			}
			default:
			{
				spawnKeyChest(killer, npc.getLocation());
				break;
			}
		}
		return super.onKill(npc, killer, isSummon);
	}
	
	private void tryEnter(L2Npc npc, L2PcInstance player)
	{
		final int npcId = npc.getId();
		
		if (!ZoneManager.getInstance().getZoneById(MANAGER_ZONES.get(npcId)).getPlayersInside().isEmpty())
		{
			showHtmlFile(player, npcId + "-FULL.htm", npc, null);
			return;
		}
		if (!player.isInParty() || (player.getParty().getMemberCount() < PARTY_MEMBER_COUNT))
		{
			showHtmlFile(player, npcId + "-SP.html", npc, null);
			return;
		}
		if (!player.getParty().isLeader(player))
		{
			showHtmlFile(player, npcId + "-NL.html", npc, null);
			return;
		}
		
		for (L2PcInstance mem : player.getParty().getMembers())
		{
			final QuestState qs = mem.getQuestState(Q00620_FourGoblets.class.getSimpleName());
			if ((qs == null) || (!qs.isStarted() && !qs.isCompleted()))
			{
				showHtmlFile(player, npcId + "-NS.html", npc, mem);
				return;
			}
			if (!hasQuestItems(mem, ENTRANCE_PASS))
			{
				showHtmlFile(player, npcId + "-SE.html", npc, mem);
				return;
			}
			if (player.getWeightPenalty() >= 3)
			{
				mem.sendPacket(SystemMessageId.UNABLE_TO_PROCESS_THIS_REQUEST_UNTIL_YOUR_INVENTORY_S_WEIGHT_AND_SLOT_COUNT_ARE_LESS_THAN_80_PERCENT_OF_CAPACITY);
				return;
			}
		}
		
		final GlobalVariablesManager vars = GlobalVariablesManager.getInstance();
		final long var = vars.getLong("FourSepulchers" + npcId, 0) + (TIME_ATTACK * 60 * 1000);
		if (var > System.currentTimeMillis())
		{
			showHtmlFile(player, npcId + "-NE.html", npc, null);
			return;
		}
		
		final int sepulcherId = getSepulcherId(player);
		
		// Delete any existing spawns
		for (L2Character cha : ZoneManager.getInstance().getZoneById(MANAGER_ZONES.get(npcId)).getCharactersInside())
		{
			if (cha.isMonster() || cha.isRaid() || (cha.isNpc() && ((((L2Npc) cha).getId() == MYSTERIOUS_CHEST) || (((L2Npc) cha).getId() == KEY_CHEST) || (((L2Npc) cha).getId() == TELEPORTER))))
			{
				cha.deleteMe();
			}
		}
		
		// Close all doors
		for (int[] doorInfo : DOORS)
		{
			if (doorInfo[0] == sepulcherId)
			{
				closeDoor(doorInfo[2], 0);
			}
		}
		
		// Teleport players inside
		final List<L2PcInstance> members = new ArrayList<>();
		for (L2PcInstance mem : player.getParty().getMembers())
		{
			if (Util.checkIfInRange(700, player, mem, true))
			{
				members.add(mem);
			}
		}
		for (L2PcInstance mem : members)
		{
			mem.teleToLocation(START_HALL_SPAWNS.get(npcId), 80);
			takeItems(mem, ENTRANCE_PASS, 1);
			takeItems(mem, CHAPEL_KEY, -1);
			if (!hasQuestItems(mem, ANTIQUE_BROOCH))
			{
				giveItems(mem, USED_PASS, 1);
			}
		}
		showHtmlFile(player, npcId + "-OK.html", npc, null);
		
		// Kick all players when/if time is over
		ThreadPoolManager.getInstance().scheduleGeneral(() ->
		{
			ZoneManager.getInstance().getZoneById(MANAGER_ZONES.get(npcId)).oustAllPlayers();
		}, TIME_ATTACK * 60 * 1000);
		
		// Save attack time
		vars.set("FourSepulchers" + npcId, System.currentTimeMillis());
		// Init progress
		STORED_PROGRESS.put(sepulcherId, 1); // start from 1
		// Start
		startQuestTimer("SPAWN_MYSTERIOUS_CHEST", ENTRY_DELAY * 60 * 1000, npc, player, false);
	}
	
	private void spawnNextWave(L2PcInstance player)
	{
		final int sepulcherId = getSepulcherId(player);
		final int currentWave = STORED_PROGRESS.get(sepulcherId);
		for (int[] spawnInfo : MONSTER_SPAWNS)
		{
			if ((spawnInfo[0] == sepulcherId) && (spawnInfo[1] == currentWave))
			{
				STORED_MONSTER_SPAWNS.get(sepulcherId).add(addSpawn(spawnInfo[2], spawnInfo[3], spawnInfo[4], spawnInfo[5], spawnInfo[6], false, 0));
			}
		}
		for (L2Npc monster : STORED_MONSTER_SPAWNS.get(sepulcherId))
		{
			monster.broadcastInfo(); // TODO: Why sometimes we cannot see some monsters?
		}
		if ((currentWave == 2) || (currentWave == 5))
		{
			startQuestTimer("WAVE_DEFEATED_CHECK", 5000, null, player, false);
		}
		else
		{
			STORED_MONSTER_SPAWNS.get(sepulcherId).clear(); // no need check for these waves
		}
	}
	
	private void spawnMysteriousChest(L2PcInstance player)
	{
		final int sepulcherId = getSepulcherId(player);
		final int currentWave = STORED_PROGRESS.get(sepulcherId);
		for (int[] spawnInfo : CHEST_SPAWN_LOCATIONS)
		{
			if ((spawnInfo[0] == sepulcherId) && (spawnInfo[1] == currentWave))
			{
				final L2Npc chest = addSpawn(MYSTERIOUS_CHEST, spawnInfo[2], spawnInfo[3], spawnInfo[4], spawnInfo[5], false, 0);
				chest.broadcastInfo(); // TODO: Why sometimes we cannot see some chests?
				break;
			}
		}
	}
	
	private void spawnKeyChest(L2PcInstance player, Location loc)
	{
		final L2Npc chest = addSpawn(KEY_CHEST, loc != null ? loc : player);
		chest.broadcastInfo(); // TODO: Why sometimes we cannot see some chests?
	}
	
	private int getSepulcherId(L2PcInstance player)
	{
		if (ZoneManager.getInstance().getZoneById(CONQUEROR_ZONE).getPlayersInside().contains(player))
		{
			return 1;
		}
		if (ZoneManager.getInstance().getZoneById(EMPEROR_ZONE).getPlayersInside().contains(player))
		{
			return 2;
		}
		if (ZoneManager.getInstance().getZoneById(GREAT_SAGES_ZONE).getPlayersInside().contains(player))
		{
			return 3;
		}
		if (ZoneManager.getInstance().getZoneById(JUDGE_ZONE).getPlayersInside().contains(player))
		{
			return 4;
		}
		return 0;
	}
	
	private void showHtmlFile(L2PcInstance player, String file, L2Npc npc, L2PcInstance member)
	{
		final NpcHtmlMessage html = new NpcHtmlMessage(npc.getObjectId());
		html.setFile(player.getHtmlPrefix(), "data/scripts/ai/areas/ImperialTomb/FourSepulchers/" + file);
		if (member != null)
		{
			html.replace("%member%", member.getName());
		}
		player.sendPacket(html);
	}
	
	public static void main(String[] args)
	{
		new FourSepulchers();
	}
}
